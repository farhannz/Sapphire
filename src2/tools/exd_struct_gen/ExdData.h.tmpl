#ifndef GENERATED_EXDDATA_H
#define GENERATED_EXDDATA_H

/* This file has been automatically generated.
   Changes will be lost upon regeneration.
   To change the content edit tools/exd_struct_gen */

#include <GameData.h>
#include <File.h>
#include <ExdData.h>
#include <ExdCat.h>
#include <Exd.h>
#include <set>
#include <variant>

#if _WIN32
#undef near
#undef far
#endif

namespace Sapphire::Data {

class ExdDataGenerated;

FORWARDS

STRUCTS

  class ExdDataGenerated
  {
  public:
    ExdDataGenerated();
    ~ExdDataGenerated();

    bool init( const std::string& path );

    xiv::exd::Exd setupDatAccess( const std::string& name, xiv::exd::Language lang );

    template< class T >
    T getField( std::vector< xiv::exd::Field >& fields, uint32_t index )
    {
       return std::get< T >( fields.at( index ) );
    }

    void loadIdList( xiv::exd::Exd& data, std::set< uint32_t >& outIdList );

    std::shared_ptr< xiv::dat::GameData > m_data;
    std::shared_ptr< xiv::exd::ExdData > m_exd_data;

    std::shared_ptr< xiv::dat::GameData > getGameData()
    {
      return m_data;
    }

    template< class T >
    std::shared_ptr< T > get( uint32_t id )
    {
      try
      {
        auto info = std::make_shared< T >( id, this );
        return info;
      }
      catch( ... )
      {
        return nullptr;
      }
      return nullptr;
    }

    template< class T >
    std::shared_ptr< T > get( uint32_t id, uint32_t slotId )
    {
      try
      {
        auto info = std::make_shared< T >( id, slotId, this );
        return info;
      }
      catch( ... )
      {
        return nullptr;
      }
      return nullptr;
    }

DATACCESS

DIRECTGETTERS

IDLISTS

IDLISTGETTERS

  };

}

#endif

